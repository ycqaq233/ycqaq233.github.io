<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++与Python的按引用传递</title>
    <link href="/2024/10/10/quote/"/>
    <url>/2024/10/10/quote/</url>
    
    <content type="html"><![CDATA[<p>在Python中，函数的参数按值传递，但这里的值指的是引用。也许有人会觉得奇怪，因为以下函数运行时并不会改变传入的参数本身的值:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">pow</span>(<span class="hljs-params">x,n</span>):<br>    x=x**n<br>    <span class="hljs-keyword">return</span> x<br>x=<span class="hljs-number">2</span> <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">pow</span>(x,<span class="hljs-number">2</span>))<br><span class="hljs-comment">#[out]4</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-comment">#[out]2 </span><br></code></pre></td></tr></table></figure><p>而在C++中，以下函数则会改变传入参数本身的值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">cube</span><span class="hljs-params">(<span class="hljs-type">double</span>&amp; x)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">double</span> x=<span class="hljs-number">2.0</span>;<br>    std::cout &lt;&lt; <span class="hljs-built_in">cube</span>(x)&lt;&lt;std::endl;<br>    std::cout &lt;&lt; x &lt;&lt;std::endl<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">cube</span><span class="hljs-params">(<span class="hljs-type">double</span>&amp; x)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> x*=x*x;<br>&#125;<br><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    [out]8</span><br><span class="hljs-comment">    [out]8</span><br><span class="hljs-comment">    */</span><br></code></pre></td></tr></table></figure><p>两种语言的行为不一样，这似乎是一件令人困惑的事情。  </p><h2 id="Python中的对象引用"><a href="#Python中的对象引用" class="headerlink" title="Python中的对象引用"></a>Python中的对象引用</h2><p>在Python中，对变量进行赋值就是完成了对象引用，比如以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;a=<span class="hljs-number">2</span><br>&gt;&gt;b=a<br>&gt;&gt;b <span class="hljs-keyword">is</span> a<br><span class="hljs-literal">True</span><br>&gt;&gt;<span class="hljs-built_in">id</span>(b)==<span class="hljs-built_in">id</span>(a)<br><span class="hljs-literal">True</span><br>&gt;&gt;b=<span class="hljs-number">3</span><br>&gt;&gt;a<br><span class="hljs-number">2</span><br>&gt;&gt;b <span class="hljs-keyword">is</span> a<br><span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>可以发现a和b实际上指向同一个对象，然而更改b的值之后a的值并没有改变。<br>这是因为a和b指向了不可变对象，当b重新赋值为3时其实是重新指向了3这个对象，而并没有更改a中<br>的值。当a和b指向可变对象时，对象引用的性质就会更加明显。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;a=[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br>&gt;&gt;b=a<br>&gt;&gt;b[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span><br>&gt;&gt;b<br>[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br>&gt;&gt;a<br>[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>因此，观察以下程序，就会发现Python的参数是按引用传递的。以下程序模拟了一辆校车巴士的行为，<br>这个例子改变自《流畅的Python》的一个示例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bus</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,passagers:<span class="hljs-built_in">list</span></span>):<br>        <span class="hljs-variable language_">self</span>._passagers=passagers<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Bus(<span class="hljs-subst">&#123;self._passagers&#125;</span>)&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">load</span>(<span class="hljs-params">self,passager</span>):<br>        <span class="hljs-variable language_">self</span>._passagers.append(passager)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">drop</span>(<span class="hljs-params">self,passager</span>):<br>        <span class="hljs-variable language_">self</span>._passagers.remove(passager)<br><br>students=[<span class="hljs-string">&quot;Tony&quot;</span>,<span class="hljs-string">&quot;Alice&quot;</span>,<span class="hljs-string">&quot;Jack&quot;</span>]<br>bus = Bus(students)<br>bus.drop(<span class="hljs-string">&quot;Tony&quot;</span>)<br>bus.load(<span class="hljs-string">&quot;Steve&quot;</span>)<br>bus.drop(<span class="hljs-string">&quot;Jack&quot;</span>)<br><span class="hljs-built_in">print</span>(bus)<br><span class="hljs-built_in">print</span>(students)<br><span class="hljs-comment">#[out]Bus([&quot;Alice&quot;,&quot;Steve&quot;])</span><br><span class="hljs-comment">#[out][&quot;Alice&quot;,&quot;Steve&quot;]</span><br></code></pre></td></tr></table></figure><p> 可以看到，原本students列表中的一些学生在下了巴士之后再也没有回来。这是因为students列表<br> 是一个可变对象，在Bus的方法调用中改变了对象原本的值。<br> 在这个程序执行执行的过程中，发生了以下几件事情：  </p><ol><li>在Bus对象创建的时候将students赋值给Bus对象的属性_passagers，此时bus._passagers和<br>students指向同一个对象。</li><li>在调用Bus的方法时，对bus._passagers所指向的对象进行了更改，由于bus._passagers是对<br>students的引用，所以students的值随之一起发生变化。</li></ol><p>所以在使用Python进行编程时，要对可变参数进行防御，在上述示例中，最简单的做法是将<code>__init__</code>的函数体修改为<code>self._passagers=passagers[:]</code>，这么做会创建一个passagers的<br>副本，这样self._passagers引用的就是passagers返回的副本而不是passagers本身所指向的对象。  </p><h2 id="C-中的对象引用"><a href="#C-中的对象引用" class="headerlink" title="C++中的对象引用"></a>C++中的对象引用</h2><p>C++使用&amp;运算符创建一个引用对象  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> i=<span class="hljs-number">5</span>;<br><span class="hljs-type">int</span>&amp; j=i;<br></code></pre></td></tr></table></figure><p>然而改变j的值,i的值也会一起变化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">5</span>;<br>    <span class="hljs-type">int</span>&amp; j = i;<br>    cout &lt;&lt; <span class="hljs-string">&quot;i:&quot;</span> &lt;&lt; i &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;j:&quot;</span> &lt;&lt;j &lt;&lt; endl;<br>    j=<span class="hljs-number">3</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;i:&quot;</span> &lt;&lt; i &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;j:&quot;</span> &lt;&lt;j &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">[out:]</span><br><span class="hljs-comment">i:5</span><br><span class="hljs-comment">j:5</span><br><span class="hljs-comment">i:3</span><br><span class="hljs-comment">j:3</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>C++产生这种行为有以下几种可能：  </p><ol><li>引用变量与原变量指向同一个对象，该对象本身的改变导致了引用变量与原变量同时变化。</li><li>引用变量与原变量指向同一个地址，该地址中的对象发生了变化导致了引用变量与原变量同时变化。</li></ol><p>由于整型对象不是一个可变对象，因此有理由相信C++的引用指向的是对象的内存地址。由于C++的引用一旦创建就不能被指向其他对象，因此以下两行代码行为相同。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span>&amp; i= a;<br><span class="hljs-type">int</span>* <span class="hljs-type">const</span> pi = &amp;a;<br></code></pre></td></tr></table></figure><p>Python的引用创建后可以指向其他对象，而C++引用创建后不能指向其他对象，这导致了Python与C++行为不同：</p>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(ink)14号小屋</title>
    <link href="/2024/10/04/hut14/"/>
    <url>/2024/10/04/hut14/</url>
    
    <content type="html"><![CDATA[<p><em>ink是一种脚本语言，其核心思想是用流标记纯文本，以生成交互式脚本。它一般被用于制作互动小说。</em></p><p>《14号小屋》是inky编辑器自带的一个demo，是一个互动小说，挺有意思的。原文的语言是英文，我后面可能会把它汉化成中文。<br>我把它导出做成了一个网页，下面是链接。</p><blockquote><p><a href="https://ycqaq233.github.io/demo/hut14/index.html">https://ycqaq233.github.io/demo/hut14/index.html</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>ink</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇文章</title>
    <link href="/2024/10/04/hello/"/>
    <url>/2024/10/04/hello/</url>
    
    <content type="html"><![CDATA[<p>费了半天劲终于把这个博客给创建好了,以后就在这里安家了。<br>这个博客现在看起来很简陋，也许我以后会给它增加一些功能，让这个网站更完善。<br>目前这个网站采用的是hexo架构，界面主题用的是fluid.<br>我以后也许会在这个网站上写写一些学习笔记之类的，看到有意思的东西我也会放上来。</p>]]></content>
    
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
